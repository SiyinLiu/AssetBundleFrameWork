/*************************************************************************
 *  File                        :  001.txt
 *  Author                 :  SiyinLiu
 *  Date                     :  2021-10-11
 *  Description        :  
 *************************************************************************/
 实战项目开发AB技术解决方案：
 AssetBundle框架整体设计――问题分析
 目前（基于Unity2017)AssetBundle技术虽然比之前版本有了很大的改进，但是仍然无法进行工程化实战开发，分析有如下部分原因：
     第1：实战项目中有成百上千的大量资源需要（批量）打包处理，不可能手工维护方式给每个资源添加AssetBundle“包名称”。
     第2：Unity维护AssetBundle包的依赖关系不是很完善，主要体现在Unity仅维护包与包之间依赖关系的记录上。（通过每个创建的*.manifest文本体现）。
            如果要加载一个有多重依赖的AssetBundle包，则需要手工写代码，把底层所有依赖包关系需要预先进行加载后才可以。
    第3：AssetBundle的商业应用涉及很多步骤：AB包的加载、AB包依赖关系（要求：不遗漏、不重复）、资源的提取与释放等。手工以及简单代码实现功能，
            将是一项繁重海量的工作，效率低下。
    第4：某些项目应用中，可能会出现反复加载同一AB包中的重复资源，导致性能降低。

AssetBundle框架整体设计――解决方案
分析以上问题，制定如下解决方案与思路：
    第1：针对上述第1条，开发专门的标记脚本，自动给指定的目录下所有合法资源文件（预设、贴图、材质等）添加标记。
    第2：针对上述第2条，通过写专门的脚本读取Unity自动创建的*.manifest文件。自动分析与维护AssetBundle包之间的依赖关系，使得包的依赖关系可以实现循环依赖、自动化加载。
    第3：针对上述第3条，开发针对AssetBundle的专门的框架。按照一定严格流程解决AB包加载、复杂依赖、资源提取释放等事宜，尽可能让最终使用框架人员，只关心输入与输出
            结果部分，屏蔽内部复杂性。
    第4：开发的AssetBundle框架中，需要对AssetBundle包之间以及AssetBundle包内资源做缓存设计，且提供参数开关，并且提供参数开关，让研发使用者自行决定是否应用
            缓存加载。


